struct esp_Value {
	union {
		double real;
		uint64_t ival;
		struct {
			bool sign : 1;
			uint16_t exp : 11;
			uint64_t frac : 52;
		}
	}
}

(-1)^sign * (1.frac) * 2^(exp - 1024)

exp = 1024

0 011 1111 1111 0000
\x3f\xf0

nil bool int real char
string function list object
table struct native

inline string
empty list
empty object

52 bits + 1 ~ 6.5 chars ~ 7.4 ascii (not aligned)

sign=0 smint

sign=1 other
	0 inline
		(truthiness ~ mask 48 bits and take value)
		000 native / undefined + ptr, 0=undef
		001 struct / nil + ptr, 0=nil
		010 bool (0=false, 1=true)
		011 char + UTF-32 right-aligned
		100 empty list + all 0s
		101 empty table + all 0s
		110 function
		111 smstr + up to 6 null-terminated string
	1 indirect
		(truthiness depends)
		000 bigint
		001 string
		010 list
		011 table
		100 object
		101 
		110 
		111 
0 000 0000 0000

bool esp_bool(esp_Value v) {
	if(v.value == 0) return false; // 0.0
	if(v.smint) return v.value&((1<<52) - 1);
	
	if(v.inline) {
		return v.value&((1<<48) - 1);
	}
	
	switch(v.type) {
		case ESP_BIGINT:
			return ((esp_BigInt*)v.address)->size != 0;
		case ESP_STRING:
			return ((esp_String*)v.address)->length != 0;
		case ESP_LIST:
			return ((esp_List*)v.address)->size != 0;
		case ESP_TABLE:
			return ((esp_Table*)v.address)->size != 0;
		case ESP_OBJECT:
			return ((esp_BigInt*)v.address)->size != 0;
	}
}

VM description:
* Values use NaN boxing
* Registers (variables)
* Stack (temporaries)
