function is(lhs, rhs) {
	return? lhs === rhs;
	return!? rhs === none;
	
	if(rhs.proto::is !== none)
		rhs->rhs.proto::is(lhs, rhs);
	else if(lhs.proto::is !== none)
		lhs->lhs.proto::is(lhs, rhs);
	else
		lhs.proto is rhs;
}

function callable(x): bool {
	return x.proto::call is function;
}

function max(...args) {
	var max = -inf;
	for(var arg in args) {
		if(arg > max) max = arg;
	}
	return max;
}

function min(...args) {
	var min = inf;
	for(var arg in args) {
		if(arg < min) min = arg;
	}
	return min;
}

inline strict function $_applyop(op is string, x, y) {
	if(typeof x === object) {
		var xx = x as object;
		return xx->::xx.proto[op](x, y);
	}
	var yy = y as object;
	return yy->::yy.proto[op](x, y);
}

@method
function ..(x: int|none, y: int|none) {
	range(x, y);
}

@method
function ..(x: int|none, y: iterable) {
	zip(range(x, x + y.length) y);
}

const unreachable = new const {
	";"() fail "Block declared unreachable was reached";
};

# Annotation for memoizing functions
function memo(name, fn) {
	const memotab = {};
	return function [name](...args) {
		if(args in memotab) {
			memotab[args];
		}
		else {
			return memotab[args] = this->fn(...args);
		}
	}
}

strict function +(x, y) {
	# typeof returns a proto corresponding to the runtime type of an any
	#  value (the actual implementation of which is undefined).
	
	var tx = typeof x, ty = typeof y;
	
	return if(tx === object or ty === object) {
		$_applyop("+", x, y);
	}
	else if(ty === string) {
		string(x) + y as string;
	}
	else {
		switch(tx) {
			case string => x as string + string(y);
			
			case float => switch(ty) {
				case none => x;
				case bool => x as float + float(y as bool);
				case char:
				case int => x as float + float(y as int);
				case float => x as float + y as float;
				
				default: goto error;
			}
			
			case int => switch(ty) {
				case none => x;
				case bool => x as int + int(y as bool);
				case char => char(int(x as char) + y as int);
				case int => x as int + y as int;
				case float => float(x as int) + y as float;
				
				default: goto error;
			}
			
			case char => switch(ty) {
				case none => x as char;
				case bool => x as char + y as bool;
				case char => int(int(x as char) + int(y as char));
				case int => int(x as char) + y as int;
				case float => float(x as char) + y as float;
				
				default: goto error;
			}
			
			case bool => switch(ty) {
				case none => u8(x as bool);
				case bool => u8(x as bool) + u8(y as bool);
				case char => char(int(x as char) + y as bool);
				case int => int(x as bool) + y as int;
				case float => float(x as bool) + y as float;
				
				default: goto error;
			}
			
			case none => switch(ty) {
				case none => none;
				case bool => +int(y as bool);
				case char => +int(y as char);
				case int => +(x as int);
				case float => +(x as float);
				
				default: goto error;
			}
		}
	}
	
error:
	fail new TypeError("Invalid types for +");
}

strict function -(x, y) {
	var tx = typeof x, ty = typeof y;
	
	return if(tx === object or ty === object) {
		$_applyop("-", x, y);
	}
	else if(ty === none) {
		x;
	}
	else {
		switch(tx) {
			case string:
				if(ty === string) {
					return string.replace(x as string, y as string, "");
				}
				goto error;
			
			case float => switch(ty) {
				case bool => x as float - float(y as bool);
				case char => x as float - float(y as char);
				case int => x as float - float(y as int);
				case float => x as float - y as float;
				
				default: goto error;
			}
			
			case int => switch(ty) {
				case bool => x as int - int(y as bool);
				case char => x as int - int(y as char);
				case int => x as int - y as int;
				case float => float(x as int) - y as float;
				
				default: goto error;
			}
			
			case char => switch(ty) {
				case bool => int(x as char) - y as bool;
				case char => int(x as char) - int(y as char);
				case int => int(x as char) - y as int;
				case float => float(x as char) - y as float;
				
				default: goto error;
			}
			
			case bool => switch(ty) {
				case bool => i8(x as bool) - i8(y as bool);
				case char => x as bool - int(y as char);
				case int => int(x as bool) - y as int;
				case float => float(x as int) - y as float;
				
				default: goto error;
			}
			
			case none => switch(ty) {
				case bool => -int(y as bool);
				case char => -int(y as char);
				case int => -(y as int);
				case float => -(y as float);
				
				default: goto error;
			}
		}
	}
	
error:
	fail new TypeError("Invalid types for -");
}

strict function *(x, y) {
	var tx = typeof x, ty = typeof y;
	
	return if(tx === object or ty === object) {
		$_applyop("*", x, y);
	}
	else {
		switch(tx) {
			case string => switch(ty) {
				case bool => if(y as bool) x else "";
				case char => string.repeat(x, int(y as char));
				case int => string.repeat(x, y as int);
				
				default: goto error;
			}
			
			case float => switch(ty) {
				case none => 0.0;
				case bool => if(y as bool) x else 0.0;
				case char => (x as float)*float(y as char);
				case int => (x as float)*float(y as int);
				case float => (x as float)*(y as float);
				case string => string(x) + (y as string);
				
				default: goto error;
			}
			
			case int => switch(ty) {
				case none => x;
				case bool => if(y as bool) x else 0;
				case char => (x as int)*int(y as char);
				case int => (x as int)*(y as int);
				case float => float(x as int)*(y as float);
				case string => string.repeat(y as string, x as int);
				
				default: goto error;
			}
			
			case bool => switch(ty) {
				case none => if(x as bool) 1 else 0;
				case bool => (x as bool) && (y as bool);
				case char => if(x as bool) y else char'\0';
				case int => if(x as bool) y else 0;
				case float => if(x as bool) y else 0.0;
				case string return if(x as bool) y else "";
			}
		}
	}
	
error:
	fail new TypeError("Invalid types for *");
}

# Called to construct the right non-finite float value from a
#  three-way comparison
strict function badfloat(x:i8) {
	return if(x < 0) -inf else if(x > 0) inf else nan;
}

strict function /(x, y) {
	var tx = typeof x, ty = typeof y;
	
	return if(tx === object or ty === object) {
		$_applyop("/", x, y);
	}
	else {
		switch(tx) {
			case string => switch(ty) {
				case int => string.chunk(x, y);
				case char:
				case string => string.split(x, y);
				
				default: goto error;
			}
			
			case float => switch(ty) {
				case none => badfloat(x as float <> 0);
				case bool => if(y as bool) x else badfloat(x as float <> 0);
				case char => (x as float)/float(y as char):
				case int => (x as float)/float(y as int);
				case float => (x as float)/(y as float);
				
				default: goto error;
			}
			
			case int => switch(ty) {
				case none => badfloat((x as int) <> 0);
				
				case bool:
					var xx = x as int;
					return if(y as bool) float(xx) else badfloat(xx <> 0);
				case char => float(x as int)/float(y as char);
				case int => float(x as int)/float(y as int);
				case float => float(x as int)/(y as float);
				
				default: goto error;
			}
			
			case bool => switch(ty) {
				case none => if(x as bool) inf else nan;
				case bool:
					return if(y as bool) x
						else if(x as bool) inf else nan;
				case char => if(x as bool) 1/float(y as char) else 0.0;
				case int => if(x as bool) 1/float(y as int) else 0.0;
				case float => if(x as bool) 1/(y as float) else 0.0;
				
				default: goto error;
			}
			
			case none => switch(ty) {
				case none => nan;
				case bool => if(y as bool) 0.0 else nan;
				case char => 0/float(y as char);
				case int => 0/float(y as int);
				case float => 0/(y as float);
				
				default: goto error;
			}
		}
	}
	
error:
	fail new TypeError("Invalid types for /");
}

strict function %(x, y) { 
	var tx = typeof x, ty = typeof y;
	
	return if(tx === object or ty === object) {
		$_applyop("%", x, y);
	}
	else {
		switch(tx) {
			case string => switch(ty) {
				case int => (x as string).length%(y as int);
				
				default: goto error;
			}
			
			case float => switch(ty) {
				case none => badfloat((x as float) <> 0);
				case bool => if(y as bool) (x as float)%1 else nan;
				case char => (x as float)%float(y as char):
				case int => (x as float)%float(y as int);
				case float => (x as float)%(y as float);
				
				default: goto error;
			}
			
			case int => switch(ty) {
				case none => badfloat(x as int <> 0);
				
				case bool:
					var xx = x as int;
					return if(y as bool) xx else badfloat(xx <> 0);
				case char => (x as int)%int(y as char);
				case int => (x as int)%(y as int);
				case float => float(x as int)%(y as float);
				
				default: goto error;
			}
			
			case bool => switch(ty) {
				case none => x%0;
				case bool => (x as bool)%(y as bool);
				case char => (x as bool)%(y as char);
				case int => (x as bool)%(y as int);
				case float => float(x as bool)%(y as float);
				
				default: goto error;
			}
			
			case none => switch(ty) {
				case none => 0%0;
				case bool => 0%(y as bool);
				case char => 0%(y as char);
				case int => 0%(y as int);
				case float => 0%(y as float);
				
				default: goto error;
			}
		}
	}
	
error:
	fail new TypeError("Invalid types for %");
}

strict function **(x, y) {
	var tx = typeof x, ty = typeof y;
	
	return if(tx === object or ty === object) {
		$_applyop("**", x, y);
	}
	else {
		switch(tx) {
			case float => switch(ty) {
				case none => 0.0;
				case bool => if(y as bool) x else 0.0;
				case char => (x as float)**int(y as char);
				case int => (x as float)**(y as int);
				case float => (x as float)**(y as float);
				
				default: goto error;
			}
			
			case int => switch(ty) {
				case none => badfloat((x as int) <> 0);
				
				case bool:
					var xx = x as int;
					return if(y as bool) xx else badfloat(xx <> 0);
				case char => (x as int)**int(y as char);
				case int => (x as int)**(y as int);
				case float => float(x as int)**(y as float);
				
				default: goto error;
			}
			
			case bool => switch(ty) {
				case none:
				case bool:
				case char:
				case int:
				case float => x;
				
				default: goto error;
			}
			
			case none => switch(ty) {
				case none:
				case bool:
				case char:
				case int:
				case float => none;
				
				default: goto error;
			}
		}
	}
	
error:
	fail new TypeError("Invalid types for **");
}

strict function //(x, y) {
	var tx = typeof x, ty = typeof y;
	
	return if(tx === object or ty === object) {
		$_applyop("//", x, y);
	}
	else {
		switch(tx) {
			case string => switch(ty) {
				case int => string.chunk(x, y);
				case char:
				case string => string.count(x, y);
				
				default: goto error;
			}
			
			case float => switch(ty) {
				case none => badfloat((x as float) <> 0);
				case bool => if(y as bool) x else nan;
				case char => (x as float)/float(y as char):
				case int => (x as float)/float(y as int);
				case float => (x as float)/(y as float);
				
				default: goto error;
			}
			
			case int => switch(ty) {
				case none => badfloat((x as int) <> 0);
				
				case bool:
					var xx = x as int;
					return if(y as bool) float(xx) else badfloat(xx <> 0);
				case char => float(x as int)/float(y as char);
				case int => float(x as int)/float(y as int);
				case float => float(x as int)/(y as float);
				
				default: goto error;
			}
			
			case bool => switch(ty) {
				case none => if(x as bool) inf else nan;
				case bool:
					return if(y as bool) x
						else if(x as bool) inf else nan;
				case char => if(x as bool) 1/float(y as char) else 0.0;
				case int => if(x as bool) 1/float(y as int) else 0.0;
				case float => if(x as bool) 1/(y as float) else 0.0;
				
				default: goto error;
			}
			
			case none => switch(ty) {
				case none => nan;
				case bool => if(y as bool) 0.0 else nan;
				case char => 0/float(y as char);
				case int => 0/float(y as int);
				case float => 0/(y as float);
				
				default: goto error;
			}
		}
	}
	
error:
	fail new TypeError("Invalid types for /");
}

inline strict function %%(x, y) { 
	var tx = typeof x, ty = typeof y;
	if(x.proto has "%%") {
		x->x.proto::"%%"(x, y);
	}
	else {
		y->y.proto::"%%"(x, y);
	}
}

inline strict function +(x, y) {
	if(x.proto has "+") {
		x->x.proto::+(x, y);
	}
	else if(y.proto has "+") {
		y->y.proto::+(x, y);
	}
	else {
		fail new Error("Unsupported types for +");
	}
}

const NotImplemented = new symbol("NotImplemented");

proto real is number {}

proto int is real {
	strict +(x, y) {
		var xx = this as int;
		
		if(x === this) {
			switch(typeof y) {
				case none => this;
				case bool => xx + y as bool;
				case char => xx + y as char;
				case int => xx + y as int;
				case float => float(xx) + y as float;
				
				default => y->y.proto::+(x, y);
			}
		}
		else NotImplemented;
	}
}

proto bool is int {
	strict +(x, y) {
		var xx = this as bool;
		
		if(x === this) {
			switch(typeof y) {
				case none => this;
				case bool => xx + y as bool;
				case char => xx + y as char;
				case int => xx + y as int;
				case float => float(xx) + y as float;
			}
		}
		else NotImplemented;
	}
	
	strict -(x, y) {
		var xx = this as bool;
		
		if(x === this) {
			switch(typeof y) {
				case none => this;
				case bool => xx - y as bool;
				case char => xx - y as char;
				case int => xx - y as int;
				case float => float(xx) - y as float;
			}
		}
		else NotImplemented;
	}
	
	strict *(x, y) {
		var xx = this as bool;
		
		if(x === this) {
			switch(typeof y) {
				case none => none;
				case bool => xx * y as bool;
				case char => xx * y as char;
				case int => xx * y as int;
				case float => float(xx) * y as float;
			}
		}
		else NotImplemented;
	}
	
	strict /(x, y) {
		var xx == this as bool;
		
		if(x === this) {
			switch(typeof y) {
				case none => float(xx)/0;
				case bool => float(xx)/float(y as bool);
				case char => float(xx)/float(y as char);
				case int => float(xx)/float(y as int);
				case float => float(xx)/(y as float);
			}
		}
		else NotImplemented;
	}
	
	strict %(x, y) {
		var xx = this as bool;
		
		if(x === this) {
			switch(typeof y) {
				case none => 1%0;
				case bool => int(xx)%int(y as bool);
				case char => int(xx)%int(y as char);
				case int => int(xx)%(y as int);
				case float => float(xx)%(y as float);
			}
		}
		else NotImplemented;
	}
	
	strict //(x, y) {
		var xx = this as bool;
		
		if(x === this) {
			switch(typeof y) {
				case none => 1/0;
				case bool => int(xx)/int(y as bool);
				case char => int(xx)/int(y as char);
				case int => int(xx)/(y as int);
				case float => int(float(xx)/(y as float));
			}
		}
		else NotImplemented;
	}
}

proto long is int {
	private digits : ...int;
	
	strict +(x, y) {
		if(x === this) {
			if(y is not long) {
				y = new long(y);
			}
			
			var d = new list(max(x->digits.length, y->digits.length));
			
			d[:-y->digits.length] = y->digits[:];
			
			var carry = 0;
			for(var i in 0..x->digits) {
				var s = d[i] + x->digits[i] + carry;
				d[i] = s%int.max;
				carry = s/int.max;
			}
			
			return new long(d);
		}
		else NotImplemented;
	}
}