#! Test
import re
import iter

const {join} = iter;

const DEC = re`\d[\d_]*v`;
# Token regex, organized to allow them to be indexed by name
const PATS = {
	"bin": `0b[_01]*[01]`,
	"oct": `0o[_0-7]*[0-7]`,
	"hex": `0x[_\da-fA-F]*[\da-fA-F]`,
	"flt": `(?:\.\d[_\d]*|\d[_\d]*\.(?:\d[_\d]*)?)(?:e[-+]\d[_\d]*)?`,
	"dec": `\d+`,
	"sq": `'(?:\\.|.+?)*?'`,
	"dq": `"(?:\\.|.+?)*?"`,
	"bq": `\`(?:\\.|.+?)*?\``,
	"sq3": `'''(?:\\.|.+?)*?'''`,
	"dq3": `"""(?:\\.|.+?)*?"""`,
	"bq3": `\`\`\`(?:\\.|.+?)*?\`\`\``,
	"id": `[\w][\w\d]*`,
	"op": [
		`[()\[\]{}]`,
		`[@~;,?]`,
		`[-+*/%&|^:]{1,2}`,
		`[<>]{1,3}`, `\.{1,3}`,
		`<<[<>]|[<>]>>`,
		`[!=]={1,2}`, `[<>]=?`
	]->join("|")
};
# Operators which can't be overloaded because they encode syntax
const SYNTACTIC = [
	",", "=", "...", ".", ":", "&&", "||", "===", "!==", "++", "--"
];
const PRECS = {
	",": 1,
	"=": 2,
	"..": 3, "...": 3,
	"||": 3, "^^": 4, "&&": 5, "|": 6, "^": 7, "&": 8,
	"==": 9, "!=": 9, "===": 9, "!==": 9,
	"<": 10, "<=": 10, ">": 10, ">=": 10, "<>": 10,
	"<<": 11, "<<<": 11, ">>": 11, ">>>": 11, "<<>": 11, "<>>": 11,
	"!": 12, "~": 13, "+": 14, "-": 14,
	"*": 15, "/": 15, "%": 15,
	"**": 16, "//": 16, "%%": 16,
	".": 17
};

# Right-associative operators
const RIGHT = [
	"**"
];

const KW = [
	"if", "then", "else", "return", "while", "var", "function"
];

const RADIX = {
	"bin": 2,
	"oct": 8,
	"dec": 10,
	"hex": 16
};

const
	NAMES = list(PATS.keys()),
	TOKEN = re("\{PATS.values()->join(')|(')})", "m"),
	COMMENT = re(`\s*(#\*(?:.|\n)+\*#\s*|#\{|#.*$)`, "m"),
	RECURSIVE_COMMENT = re(`#\{|#\}`, "m"),
	NEWLINE = re`\n`,
	SPACE = re(`\s+`, "m"),
	WORD = re`\S+`;

proto Token {
	public value, type, line, col, pos;
	
	new(value, type, line, col, pos) {
		this := {value, type, line, col, pos};
	}
}

proto Expr {}

proto Const is Expr {
	public value;
	
	new(value) {
		this := {value};
	}
}

proto Var is Expr {
	public name;
	
	new(name) {
		this := {name};
	}
}

proto Sexp is Expr {
	public elems;
	
	new(elems) {
		this := {elems};
	}
}

proto Tuple is Expr {
	public elems;
	
	new(elems) {
		this := {elems};
	}
}

proto Assign is Expr {
	public name, value;
	
	new(name, value) {
		this := {name, value};
	}
}

proto Func is Expr {
	public name, args, body;
	
	new(name, args, body) {
		this := {name, args, body};
	}
}

proto Block is Expr {
	public elems;
	
	new(elems) {
		this := {elems};
	}
}

proto Prog is Block {
	
}

proto Lex {
	public pos, line, col, src;
	
	new(src) {
		this.pos = 0;
		this.line = 1;
		this.col = 1;
		
		this.src = src;
	}
	
	error(msg) {
		# Want to build a preview, extract the start of line
		var sol = this.src.rfind('\n', this.pos)
		if(sol is none) sol = 0;
		
		var left = this.pos - 60 # Prioritize before over after
		if(left < 0) left = 0;
		
		# Cutoff at 80 chars or the end of the line
		var pre = this.src[left:80].split('\n')[0];
		# Point to the error
		pre += "\n\{'-'*(this.pos - left)}^";
		
		# DEBUG
		pre += "\n\{this.src[this.pos:]}";
		
		return new ParseError(msg, pre, this.pos, this.line, this.col);
	}
		
	# Utility to use different regexes at the same index
	match(reg) {
		return reg.match(this.src, this.pos);
	}
	
	# Adjust the parser position based on the token match
	repos(m) {
		this.pos += m[0].length;
		var lines = NEWLINE.split(m[0])
		if(lines.length > 1) {
			this.line += lines.length - 1;
			this.col = lines[-1].length;
		}
		else {
			this.col += m[0].length;
		}
	}
	
	next() {
		if(this.pos >= this.src.length) {
			return none;
		}
		
		var comment;
		loop {
			comment = this.match(COMMENT);
		}
		while(comment) {
			this.repos(comment);
			# TODO: Recursive comment parsing
		}
		
		# Clean up ordinary space without comments
		var m = this.match(SPACE);
		if(m) this.repos(m);
		
		m = this.match(TOKEN)
		if(m is none) {
			m = this.match(WORD)
			fail this.error("Unknown token " + m[0]);
		}
		
		tok = m[m.lastgroup]
		type = NAMES[m.lastgroup - 1]
		
		switch(type) {
			case "id" => {
				if(tok in KW) type = "kw";
				val = tok;
			}
			case in RADIX => {
				var r = RADIX[type];
				if(r != 10) tok = tok[2:]
				type = "const";
				val = int(tok.replace("_", ""), r);
			}
			case "flt" => {
				type = "const";
				val = float(tok.replace("_", ""), r);
			}
			case "sq":
			case "dq":
			case "bq" => {
				type = "const";
				val = tok[1:-1]
			}
			
			case "sq3":
			case "dq3":
			case "bq3" => {
				type = "const";
				val = tok[3:-3]
			}
			
			case "op" => {
				val = tok;
			}
			
			else: fail this.error("Unknown token " + tok);
		}
		
		var {pos, line, col} = this;
		return new Token(val, type, pos, line, col) finally this.repos(m);
	}
}

proto Parser is Lex {
	public cur, la, scope;
	
	new() {
		super();
		
		this.cur = this.next();
		this.la = none;
		this.scope = [];
	}
	
	consume() {
		if(this.la) {
			this.cur = this.la;
			this.la = none;
		}
		else {
			this.cur = this.next();
			
			if(this.cur.value in PRECS) {
				this.la = this.next();
				if(this.la.value == "=") {
					this.cur.assign = true;
					this.la = none;
				}
			}
		}
	}
	
	maybe(what) {
		if(this.cur.value == what) {
			this.consume();
			return true;
		}
		return false;
	}
	
	expect(what) {
		if(!this.maybe(what)) {
			fail this.expected(what);
		}
	}
	
	expectType(type) {
		if(this.cur.type != type) {
			fail this.expected(type);
		}
	}
	
	expected(what) = this.error("Expected " + what);
	
	addVar(v) = this.scope[-1].push(v);
	
	lvalue() {
		var x = this.atom();
		if(x.lvalue) return x;
		
		fail this.error("Not an l-value");
	}
	
	atom() {
		if(this.cur is none) return none;
		
		# Exceptions which shouldn't be consumed
		var
			cur = this.cur,
			val = cur.value,
			ct = cur.type
		
		if(val in set(")", ";", "}") return none;
		
		this.consume()
		
		return switch(ct) {
			case "const" => new Const(val);
			
			case "id" => new Var(val);
			
			case "op" => {
				if(val == "(") {
					if(this.maybe(")") {
						return new Tuple();
					}
					
					with(this.stack.push([])) {
						return
							semiAsExpr([...this.semichain()])
							finally this.expect(")");
					}
				}
				# else if(val == ")") {}
				# else if(val == "}") {}
				else {
					return new Sexp(val, new Const(none), this.atom());
				}
			}
			
			case "kw" => switch(val) {
				case "if" => {
					var cond = this.expr();
					this.maybe("then");
					
					var th = this.block();
					var el =
						if(this.maybe("else")) new Const(none);						else this.block();
					
					return new Sexp("if", cond, th, el);
				}
				
				#*
				 * Else cannot appear on its own, but it isn't an error to
				 *  encounter it while parsing an atom - this can happen
				 *  while parsing the then block.
				 *#
				case "else" => none;
				
				case "while" => {
					var cond = this.expr();
					var bl = this.block();
					var th = new Const(none);
					var el = new Const(none);
					
					return new Sexp("while", cond, bl, th, el);
				}
				
				#* 
				 * Var declarations are split into two separate concerns,
				 *  variable name hoisting to the innermost enclosing
				 *  scope and assignment of the variable at the correct
				 *  point (by returning assignments as a group of
				 *  assignment s-exprs)
				 *#
				case "var" => {
					var group = [];
					loop {
						this.expectType("id");
						var name = this.cur.value;
						this.consume();
						
						this.addVar(name);
						
						if(this.maybe("=")) {
							var x = this.expr();
							if(x is none) {
								fail this.expected("expression");
							}
							
							group.push(new Assign(Var(name), x));
						}
					} while(this.maybe(","));
					
					return semiAsExpr(group);
				}
				
				case "function" => {
					var name = none;
					if(this.cur.type == "id") {
						name = this.cur.value;
						this.consume();
					}
					
					var args = this.lvalue();
					args = if(args is Tuple) args.elems else [args];
					
					var block = this.block();
					var func = new Func(name, args, block);
					
					if(name) {
						this.addVar(name);
						return new Assign(Var(name), func);
					}
					else func;
				}
				
				case "try" => fail new NotImplementedError("try");
				
				else => fail this.error("Unimplemented keyword " + val);
			}
			
			else => fail this.error("Unknown token " + val);
		}
	}
	
	#**
	 * Parses a "block", which is an expression which prioritizes curly-brace
	 *  blocks over object literals and considers the semicolon to end the
	 *  expression rather than continue it.
	**#
	block() {
		if(this.maybe("{")) {
			with(var v = this.scope.push([])) {
				var b = list(this.semichain());
				this.expect("}");
				
				if(v) semiAsExpr(b) else new Block(b, v);
			}
		}
		else {
			this.expr() finally this.maybe(";");
		}
	}
	
	binop() {
		var op = this.cur.value;
		if(op not in PRECS) return none, none;
		
		this.consume();
		
		return op, this.maybe("=");
	}
	
	#**
	 * Uses precedence climbing
	**#
	expr_impl(min_prec) {
		var lhs = this.atom();
		
		while(this.cur is not none) {
			var op = this.cur.value;
			
			switch(op) {
				case "(" => {
					lhs = new Call(lhs, list(
						loop {
							this.expr_impl(PRECS[','] + 1);
						} while(this.maybe(","))
					));
				}
				
				case "[" => {
					lhs = new Get(lhs, list(
						loop {
							this.expr_impl(PRECS[":"] + 1)
						} while(this.maybe(":"))
					))
				}
			}
			then continue;
			
			if(op not in PRECS) break;
			
			var assign = this.cur.assign;
			var prec = PRECS[if(assign) "=" else op];
			
			if(prec < min_prec) break;
			
			var next_min_prec = prec + (op in RIGHT);
			this.consume();
			
			rhs = this.expr_impl(next_min_prec);
			
			if(assign) {
				lhs = new Assign(op, lhs, rhs);
			}
			else {
				if(op == ",") {
					if(lhs is Tuple) {
						lhs.push(rhs);
					}
					else {
						lhs = new Tuple(lhs, rhs);
					}
				}
				else {
					lhs = new Sexp(op, lhs, rhs);
				}
			}
		}
		
		return lhs;
	}
	
	expr() = this.expr_impl(0);
	
	#**
	 * Parse a block as a chain of expressions possibly separated by
	 *  semicolons
	**#
	yield semichain() {
		while(this.cur is not none) {
			yield this.expr() ?? break;
			
			while(this.maybe(";")) {}
		}
	}
	
	parse() {
		with(var v = this.scope.push([])) {
			return Prog([...this.semichain()], v);
		}
	}
}
